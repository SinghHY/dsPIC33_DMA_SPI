CCS PCD C Compiler, Version 5.069, 35380               07-Jan-20 17:08

               Filename:   C:\GitRepo\dsPIC33_DMA_SPI\SPI_Fast.X\build\default\debug\Main.lst

               ROM used:   730 bytes (0%)
                           Largest free fragment is 65536
               RAM used:   146 (0%) at main() level
                           146 (0%) worst case
               Stack used: 38 locations (0 in main + 38 for interrupts)
               Stack size: 128

*
00000:  GOTO    244
*
0001C:  DATA    00,02,00
.................... /********************************************************************** 
.................... * Filament Control. 
.................... * © Harpreet Singh, 2017 
.................... * FileName:        main.c 
.................... * Dependencies:    Header (.h) files if applicable, see below*  
.................... * Processor:dsPIC33FJ256GP710A 
.................... * Compiler:        MPLAB® CCS v5.074 
.................... ************************************************************************/ 
.................... #include <33FJ256GP710A.h> 
.................... //////////// Standard Header file for the DSPIC33FJ256GP710A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device DSPIC33FJ256GP710A 
....................  
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #device ADC = 12  
.................... #use delay(crystal = 40Mhz) 
.................... //#use spi(SLAVE, SPI2, BITS = 16, MODE = 0, ENABLE = PIN_G9, stream = SPI_2) 
....................  
....................          
.................... #define GREEN_LED  PIN_A6 
.................... #define RED_LED  PIN_A7 
....................  
.................... int8 i, Error; 
....................     
.................... #bank_dma  
....................     unsigned int16  TxBuffer[4]; 
.................... #bank_dma  
....................     unsigned int16  RxBuffer[4];  
.................... #INT_DMA0 
.................... void dma0_isr(void) 
*
00200:  PUSH    42
00202:  PUSH    36
00204:  PUSH    32
00206:  MOV     W0,[W15++]
00208:  MOV     #2,W0
0020A:  REPEAT  #C
0020C:  MOV     [W0++],[W15++]
.................... { 
....................    dma_start(0, DMA_ONE_SHOT ,&RxBuffer[0],4); 
0020E:  BCLR.B  381.7
00210:  MOV.B   #1,W0L
00212:  MOV.B   W0L,380
00214:  MOV     #7808,W4
00216:  MOV     W4,384
00218:  MOV     #4,W4
0021A:  MOV     W4,38A
0021C:  BSET.B  381.7
....................    dma_start(2, DMA_ONE_SHOT ,&TxBuffer[0],4); 
0021E:  BCLR.B  399.7
00220:  MOV.B   #1,W0L
00222:  MOV.B   W0L,398
00224:  MOV     #7800,W4
00226:  MOV     W4,39C
00228:  MOV     #4,W4
0022A:  MOV     W4,3A2
0022C:  BSET.B  399.7
....................    clear_interrupt(INT_DMA0); 
0022E:  BCLR.B  84.4
....................    clear_interrupt(INT_DMA2); 
00230:  BCLR.B  87.0
00232:  BCLR.B  84.4
00234:  MOV     #1A,W0
00236:  REPEAT  #C
00238:  MOV     [--W15],[W0--]
0023A:  MOV     [--W15],W0
0023C:  POP     32
0023E:  POP     36
00240:  POP     42
00242:  RETFIE  
.................... } 
....................  
.................... void main() 
00244:  MOV     #7F80,W15
00246:  MOV     #7FFF,W0
00248:  MOV     W0,20
0024A:  NOP     
0024C:  BSET.B  81.7
0024E:  SETM    32C
00250:  SETM    32A
00252:  SETM    36C
00254:  SETM    36A
.................... {     
....................      
....................     
....................    //output_float(PIN_G9); // SS as an input 
....................     setup_spi2(SPI_SLAVE | SPI_SCK_IDLE_LOW | SPI_XMIT_L_TO_H | SPI_MODE_16B | SPI_SAMPLE_AT_END | SPI_SS_ENABLED); 
00256:  BCLR.B  261.7
00258:  BCLR.B  260.6
0025A:  MOV     #780,W4
0025C:  MOV     W4,262
0025E:  BSET.B  261.7
....................  
....................    
....................        TxBuffer[0] = 1; 
00260:  MOV     #1,W4
00262:  MOV     W4,7800
....................        TxBuffer[1] = 3; 
00264:  MOV     #3,W4
00266:  MOV     W4,7802
....................        TxBuffer[2] = 2; 
00268:  MOV     #2,W4
0026A:  MOV     W4,7804
....................        TxBuffer[3] = 1; 
0026C:  MOV     #1,W4
0026E:  MOV     W4,7806
....................  
....................    enable_interrupts(INT_DMA0); 
00270:  BSET.B  94.4
....................    //enable_interrupts(INTR_GLOBAL); 
....................    setup_dma(2, DMA_OUT_SPI2, DMA_WORD);   
00272:  MOV.B   #20,W0L
00274:  MOV.B   W0L,399
00276:  MOV.B   #21,W0L
00278:  MOV.B   W0L,39A
0027A:  MOV     #268,W4
0027C:  MOV     W4,3A0
....................    setup_dma(0, DMA_IN_SPI2, DMA_WORD); 
0027E:  CLR.B   381
00280:  MOV.B   #21,W0L
00282:  MOV.B   W0L,382
00284:  MOV     #268,W4
00286:  MOV     W4,388
....................  
....................    //spi_prewrite(TxBuffer[0]); 
....................    dma_start(0, DMA_ONE_SHOT ,&RxBuffer[0],4);   
00288:  BCLR.B  381.7
0028A:  MOV.B   #1,W0L
0028C:  MOV.B   W0L,380
0028E:  MOV     #7808,W4
00290:  MOV     W4,384
00292:  MOV     #4,W4
00294:  MOV     W4,38A
00296:  BSET.B  381.7
....................    dma_start(2, DMA_ONE_SHOT ,&TxBuffer[0],4); 
00298:  BCLR.B  399.7
0029A:  MOV.B   #1,W0L
0029C:  MOV.B   W0L,398
0029E:  MOV     #7800,W4
002A0:  MOV     W4,39C
002A2:  MOV     #4,W4
002A4:  MOV     W4,3A2
002A6:  BSET.B  399.7
....................    enable_interrupts(INT_DMA0); 
002A8:  BSET.B  94.4
....................    
....................    while(1) 
....................    { 
....................  
....................             //dma_start(0, DMA_ONE_SHOT,&RxBuffer[0],4); 
....................         
....................        //Error = interrupt_active(INT_DMA0); 
....................        
....................             
....................         
....................             for (i=0; i<=3; i++) 
002AA:  CLR.B   85A
002AC:  MOV.B   85A,W0L
002AE:  SE      W0,W0
002B0:  CP      W0,#3
002B2:  BRA     GT,2D4
....................                 TxBuffer[i] = RxBuffer[i]; 
002B4:  MOV.B   85A,W0L
002B6:  SE      W0,W0
002B8:  MOV     W0,W4
002BA:  MUL.UU  W4,#2,W0
002BC:  MOV     #7800,W4
002BE:  ADD     W0,W4,W5
002C0:  MOV.B   85A,W0L
002C2:  SE      W0,W0
002C4:  MOV     W0,W4
002C6:  MUL.UU  W4,#2,W0
002C8:  MOV     #7808,W4
002CA:  ADD     W0,W4,W0
002CC:  MOV     [W0],[W5]
002CE:  INC.B   085A
002D0:  GOTO    2AC
002D4:  GOTO    2AA
....................            //TxBuffer[1] = RxBuffer[1]; 
....................   
....................    } 
....................    
.................... }    
002D8:  BRA     2D8

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0082   PR IESO
          H: 0000  
   Word  5L: 00C2   HS OSCIO
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00E0   NOPUT
          H: 0000  
   Word  8L: 0043   ICSP1 NOJTAG DEBUG
          H: 0000  

   Some fuses have been forced to be compatible with the ICD debugger.
